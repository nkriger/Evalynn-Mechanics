//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Sripts/Evalynn/Aiming/AimingMouse.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AimingMouse: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AimingMouse()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AimingMouse"",
    ""maps"": [
        {
            ""name"": ""Aiming"",
            ""id"": ""838f7622-668a-4e47-a5bd-e985ca81ec32"",
            ""actions"": [
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Value"",
                    ""id"": ""2de09ab4-4a57-41de-bf67-68ac5d2ac540"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""ab6438fb-cac6-4186-986f-dfa21ff9e30c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""580b3942-97b7-4810-839d-8e9e6d0b6414"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4c3bb7d-c976-499a-9fb9-56f14510bf18"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Aiming
        m_Aiming = asset.FindActionMap("Aiming", throwIfNotFound: true);
        m_Aiming_Cursor = m_Aiming.FindAction("Cursor", throwIfNotFound: true);
        m_Aiming_Click = m_Aiming.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Aiming
    private readonly InputActionMap m_Aiming;
    private List<IAimingActions> m_AimingActionsCallbackInterfaces = new List<IAimingActions>();
    private readonly InputAction m_Aiming_Cursor;
    private readonly InputAction m_Aiming_Click;
    public struct AimingActions
    {
        private @AimingMouse m_Wrapper;
        public AimingActions(@AimingMouse wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cursor => m_Wrapper.m_Aiming_Cursor;
        public InputAction @Click => m_Wrapper.m_Aiming_Click;
        public InputActionMap Get() { return m_Wrapper.m_Aiming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AimingActions set) { return set.Get(); }
        public void AddCallbacks(IAimingActions instance)
        {
            if (instance == null || m_Wrapper.m_AimingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AimingActionsCallbackInterfaces.Add(instance);
            @Cursor.started += instance.OnCursor;
            @Cursor.performed += instance.OnCursor;
            @Cursor.canceled += instance.OnCursor;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IAimingActions instance)
        {
            @Cursor.started -= instance.OnCursor;
            @Cursor.performed -= instance.OnCursor;
            @Cursor.canceled -= instance.OnCursor;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IAimingActions instance)
        {
            if (m_Wrapper.m_AimingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAimingActions instance)
        {
            foreach (var item in m_Wrapper.m_AimingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AimingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AimingActions @Aiming => new AimingActions(this);
    public interface IAimingActions
    {
        void OnCursor(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
